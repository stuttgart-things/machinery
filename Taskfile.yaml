---
version: 3
vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  DATE:
    sh: date -Ih
  VERSION:
    sh: |
      [ "$(git branch --show-current)" != "main" ] && echo "dev-$(git describe --tags --abbrev=0)" || echo $(git describe --tags --abbrev=0)

dotenv: ['.env', '{{.HOME}}/.env']

tasks:
  server:
    desc: Start server
    cmds:
      - go run main.go

  client:
    desc: Start client
    cmds:
      - go run client/client.go
    env:
      SECURE_CONNECTION:
        sh: gum choose --header="SECURE_CONNECTION?:" "true" "false"
      CLUSTERBOOK_SERVER: "localhost:50051"

  do:
    desc: Select a task to run
    cmds:
      - |
        task=$(yq e '.tasks | keys' Taskfile.yaml | sed 's/^- //' | gum choose)
        task ${task}

  proto:
    desc: Generate go code from proto files
    cmds:
      - protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative {{ .PROTO_DIR }}/*.proto
    vars:
      PROTO_DIR: resourceservice

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  commit:
    desc: Commit + push code into branch
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "committing changes"
          echo "ENTER COMMIT MESSAGE"
          COMMIT_MESSAGE=$(echo $(gum choose "feat: {{ .BRANCH }}" "fix: {{ .BRANCH }}" "BREAKING CHANGE: {{ .BRANCH }}" "ENTER CUSTOM COMMIT MESSAGE"))

          if [ "$COMMIT_MESSAGE" == "ENTER CUSTOM COMMIT MESSAGE" ]; then
            COMMIT_MESSAGE=$(echo $(gum input --placeholder "scope" --value "commit to {{ .BRANCH }}"))
          fi

          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "no changes"
        fi
        git push origin -u {{ .BRANCH }}